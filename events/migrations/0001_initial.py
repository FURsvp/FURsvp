# Generated by Django 5.2.3 on 2025-06-18 19:42

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, help_text='Description of the group and its activities')),
                ('logo_base64', models.TextField(blank=True, help_text='Group logo as base64 string', null=True)),
                ('website', models.URLField(blank=True, help_text="Group's website URL", null=True)),
                ('contact_email', models.EmailField(blank=True, help_text='Primary contact email for the group', max_length=254, null=True)),
                ('telegram_channel', models.CharField(blank=True, help_text='Telegram channel username (without @)', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=300)),
                ('content', models.TextField()),
                ('published', models.DateTimeField()),
                ('original_link', models.URLField(blank=True, null=True)),
                ('guid', models.CharField(blank=True, max_length=255, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('start_time', models.TimeField(blank=True, default=datetime.time(0, 0), null=True)),
                ('end_time', models.TimeField(blank=True, default=datetime.time(0, 0), null=True)),
                ('description', models.TextField(blank=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('state', models.CharField(blank=True, max_length=50, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled')], default='active', help_text='Current status of the event', max_length=20)),
                ('age_restriction', models.CharField(choices=[('none', 'All ages'), ('adult', '18+ (Adult)'), ('mature', '21+ (Mature)')], default='none', help_text='Age restriction for the event', max_length=10)),
                ('capacity', models.IntegerField(blank=True, help_text='Maximum number of attendees. Leave blank for no limit.', null=True)),
                ('waitlist_enabled', models.BooleanField(default=False, help_text='Enable a waitlist if capacity is reached.')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.group')),
            ],
        ),
        migrations.CreateModel(
            name='RSVP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(blank=True, choices=[('confirmed', 'Confirmed'), ('waitlisted', 'Waitlisted'), ('maybe', 'Maybe'), ('not_attending', 'Not Attending')], default='confirmed', max_length=20, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to='events.event')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rsvps', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
                'unique_together': {('event', 'user')},
            },
        ),
    ]
